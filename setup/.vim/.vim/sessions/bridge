let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
inoremap <M-Right> :call ACSB_stack_jump(1)
inoremap <M-Left> :call ACSB_stack_jump(-1)
imap <F10>  <BS>\hna
imap <F9>  <BS>\hpa
imap <F8>  <BS>\hca
imap <F3> \tf
imap <F4> \tp
map! <F1> <F1>
vnoremap  <
vmap 	 
map <silent>  :!codelight-rebuild-cscopedb --no-files "%:p:h" . cscope-data kscope-data codelight-data
vnoremap  >
noremap   <PageDown>
noremap - <PageUp>
nnoremap ;v 15>
nnoremap ;a 5+
map <silent> ;cp :ACSBStacks
map <silent> ;cq :ACSBQueries
noremap ;cl :call ACSB_stack_jump(1)
noremap ;ch :call ACSB_stack_jump(-1)
noremap ;ci :ACSBfindsym inc =expand("<cword>")
noremap ;cf :ACSBfindsym file =expand("<cword>")
noremap ;ce :ACSBfindsym grep =expand("<cword>")
noremap ;ct :ACSBfindsym txt =expand("<cword>")
noremap ;cc :ACSBfindsym caller =expand("<cword>")
noremap ;cd :ACSBfindsym called =expand("<cword>")
noremap ;cg :ACSBfindsym def =expand("<cword>")
noremap ;cs :ACSBfindsym ref =expand("<cword>")
nnoremap ;f :QFExplore
nnoremap ;nc :NERDTree /C
nnoremap ;nbo :NERDTree /B/TOOLS
nnoremap ;nbsi :NERDTree /B/SOURCE/SCI_INSTALLATION_SUPPORT_SERVICE_262180
nnoremap ;nbs :NERDTree /B/SOURCE
nnoremap ;nbtitt :NERDTree /B/TEST/SCI_INSTALLATION_SUPPORT_SERVICE_262180/TEST_APPS/SOURCE/TOOLS
nnoremap ;nbtit :NERDTree /B/TEST/SCI_INSTALLATION_SUPPORT_SERVICE_262180/TEST_APPS/SOURCE
nnoremap ;nbt :NERDTree /B/TEST
nnoremap ;nbd :NERDTree /B/DEV
nnoremap ;nb :NERDTree /B
nnoremap ;na :NERDTree /A
nnoremap ;nh :NERDTree /home/tlippert
nnoremap ;nr :NERDTree /
nnoremap ;N :NERDTreeToggle
nnoremap ;t :TlistToggle
nnoremap ;n :set number
nnoremap ;nn :set nonumber
nnoremap ;wv 10>
nnoremap ;wh 10+
nnoremap ;wr r
nnoremap ;wb b
nnoremap ;wt t
nnoremap ;h h
nnoremap ;l l
nnoremap ;j j
nnoremap ;k k
nnoremap ;gr :exe ":grep ".expand("<cword>")." *"
nnoremap ;qs :wall:qa
nnoremap ;QQ :qa!
nnoremap ;tu :TlistUnlock 
nnoremap ;tl :TlistLock 
nnoremap ;tU :TlistUpdate 
nnoremap ;tr :TlistAddFilesRecursive . mcts*\|*.sh\|*.exp\|*.py\|*.configure\|*.set\|*.functions\|*.c\|*.h\|Makefile\|*.template
nnoremap ;tR :TlistAddFilesRecursive . 
map Q gq
noremap Y y$
vmap [% [%m'gv``
nnoremap \f :call QFExploreToggle()
nnoremap \w :WMToggle
nnoremap \e :call ToggleShowExplorer()
nnoremap \t :Tlist
nnoremap \/ :exe ":h " expand("<cword>")
nmap \sv <Plug>SVNVimDiff
nmap \su <Plug>SVNUpdate
nmap \sr <Plug>SVNResolved
nmap \sp <Plug>SVNPropedit
nmap \si <Plug>SVNInfo
nmap \ss <Plug>SVNStatus
nmap \sw <Plug>SVNReview
nmap \sq <Plug>SVNRevert
nmap \sl <Plug>SVNLog
nmap \sg <Plug>SVNGotoOriginal
nmap \sd <Plug>SVNDiff
nmap \sc <Plug>SVNCommit
nmap \sG <Plug>SVNClearAndGotoOriginal
nmap \sn <Plug>SVNAnnotate
nmap \sa <Plug>SVNAdd
map <silent> \bs <Plug>SplitBufExplorer
map <silent> \be <Plug>StartBufExplorer
map \dk <Plug>DirDiffPrev
map \dj <Plug>DirDiffNext
map \dp <Plug>DirDiffPut
map \dg <Plug>DirDiffGet
nnoremap \hn :call RepeatTag(1)
nnoremap \hp :call RepeatTag(0)
nnoremap \hc :call InsertCloseTag()
nnoremap \th :set invhls hls?
nnoremap \tl :set invlist list?
nnoremap \tf :if &fo =~ 't' | set fo-=t | else | set fo+=t | endif | set fo?
nnoremap \tp :set invpaste paste?
vmap ]% ]%m'gv``
vmap a% [%v]%
nmap gx <Plug>NetrwBrowseX
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetBrowseX(expand("<cWORD>"),0)
nnoremap <silent> <Plug>SVNCommitDiff :SVNCommitDiff
nnoremap <silent> <Plug>SVNVimDiff :SVNVimDiff
nnoremap <silent> <Plug>SVNUpdate :SVNUpdate
nnoremap <silent> <Plug>SVNResolved :SVNResolved
nnoremap <silent> <Plug>SVNPropedit :SVNPropedit
nnoremap <silent> <Plug>SVNInfo :SVNInfo
nnoremap <silent> <Plug>SVNStatus :SVNStatus
nnoremap <silent> <Plug>SVNReview :SVNReview
nnoremap <silent> <Plug>SVNRevert :SVNRevert
nnoremap <silent> <Plug>SVNLog :SVNLog
nnoremap <silent> <Plug>SVNClearAndGotoOriginal :SVNGotoOriginal!
nnoremap <silent> <Plug>SVNGotoOriginal :SVNGotoOriginal
nnoremap <silent> <Plug>SVNDiff :SVNDiff
nnoremap <silent> <Plug>SVNCommit :SVNCommit
nnoremap <silent> <Plug>SVNAnnotate :SVNAnnotate
nnoremap <silent> <Plug>SVNAdd :SVNAdd
nmap <F2> \tl
nmap <F3> \tf
nmap <F4> \tp
vmap <S-Tab> 
omap <F1> <F1>
vmap <F1> <F1>
nnoremap <F1> :help 
noremap <Del> 2 " [<Insert> by default is like i, and <Del> like x.]
noremap <Insert> 2
imap <NL> 
imap <silent>  :ACSBStacks
imap <silent>  :ACSBQueries
imap <silent>  :!codelight-rebuild-cscopedb --no-files "%:p:h" . cscope-data kscope-data codelight-data
iabbr hse he/she
iabbr lfpg Llanfairpwllgwyngyllgogerychwyrndrobwllllantysiliogogogoch
let &cpo=s:cpo_save
unlet s:cpo_save
set autoindent
set autoread
set autowrite
set background=dark
set backspace=indent,eol,start
set cindent
set comments=://,b:#,:%,:XCOMM,n:>,fb:-,s:/*,mb:**,ex:*/,fb:*,b:\",n::
set completeopt=menuone
set expandtab
set fileencodings=ucs-bom,utf-8,default,latin1
set formatoptions=cqlnro
set grepprg=/bin/grep\ -Hirn
set helplang=en
set hidden
set history=50
set hlsearch
set ignorecase
set incsearch
set listchars=eol:$,tab:»·
set matchpairs=(:),{:},[:],<:>
set nomodeline
set mouse=a
set pastetoggle=<F4>
set printoptions=paper:letter
set ruler
set runtimepath=~/.vim,/var/lib/vim/addons,/usr/share/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim70,/usr/share/vim/vimfiles/after,/usr/share/vim/addons/after,/var/lib/vim/addons/after,~/.vim/after
set shiftround
set shiftwidth=3
set showcmd
set showmatch
set smartcase
set smartindent
set smarttab
set softtabstop=3
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
set tabstop=3
set textwidth=80
set viminfo='1000,f1,/500,:500,@500,<1000
set whichwrap=h,l,~,[,]
set wildmode=list:longest,full
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +791 scomm.c
badd +153 scommsocket.h
badd +1 Cannot
badd +57 scommsocket.c
badd +1148 test/bridge.c
badd +19 scommtypes.h
silent! argdel *
edit test/bridge.c
set splitbelow splitright
set nosplitbelow
set nosplitright
wincmd t
set winheight=1 winwidth=1
argglobal
let s:cpo_save=&cpo
set cpo&vim
imap <buffer> <silent> <M-F9> :call C_Compile():redraw:call C_HlMessage()
imap <buffer> <silent> <F9> :call C_Link():redraw:call C_HlMessage()
imap <buffer> <silent> <C-F9> :call C_Run()
imap <buffer> <silent> <S-F9> :call C_Arguments()
onoremap <buffer> <silent> \cl :call C_LineEndComment()
nnoremap <buffer> <silent> \cl :call C_LineEndComment()
vnoremap <buffer> <silent> \cl :call C_MultiLineEndComments()
onoremap <buffer> <silent> \cj :call C_AdjustLineEndComm("a")
nnoremap <buffer> <silent> \cj :call C_AdjustLineEndComm("a")
vnoremap <buffer> <silent> \cj :call C_AdjustLineEndComm("v")
noremap <buffer> <silent> \cs :call C_GetLineEndCommCol()
onoremap <buffer> <silent> \c* :call C_CodeComment("a","yes"):nohlsearchj
nnoremap <buffer> <silent> \c* :call C_CodeComment("a","yes"):nohlsearchj
vnoremap <buffer> <silent> \c* :call C_CodeComment("v","yes"):nohlsearchj
onoremap <buffer> <silent> \c/ :call C_CodeComment("a","no"):nohlsearchj
nnoremap <buffer> <silent> \c/ :call C_CodeComment("a","no"):nohlsearchj
vnoremap <buffer> <silent> \c/ :call C_CodeComment("v","no"):nohlsearchj
onoremap <buffer> <silent> \co :call C_CommentCode("a"):nohlsearch
nnoremap <buffer> <silent> \co :call C_CommentCode("a"):nohlsearch
vnoremap <buffer> <silent> \co :call C_CommentCode("v"):nohlsearch
noremap <buffer> <silent> \cfr :call C_InsertTemplate("comment.frame")
noremap <buffer> <silent> \cfu :call C_InsertTemplate("comment.function")
noremap <buffer> <silent> \cme :call C_InsertTemplate("comment.method")
noremap <buffer> <silent> \ccl :call C_InsertTemplate("comment.class")
noremap <buffer> <silent> \cd a=C_InsertDateAndTime('d')
noremap <buffer> <silent> \ct a=C_InsertDateAndTime('dt')
onoremap <buffer> <silent> \sd :call C_InsertTemplate("statements.do-while")
nnoremap <buffer> <silent> \sd :call C_InsertTemplate("statements.do-while")
vnoremap <buffer> <silent> \sd :call C_InsertTemplate("statements.do-while", "v")
noremap <buffer> <silent> \sf :call C_InsertTemplate("statements.for")
onoremap <buffer> <silent> \sfo :call C_InsertTemplate("statements.for-block")
nnoremap <buffer> <silent> \sfo :call C_InsertTemplate("statements.for-block")
vnoremap <buffer> <silent> \sfo :call C_InsertTemplate("statements.for-block", "v")
noremap <buffer> <silent> \si :call C_InsertTemplate("statements.if")
onoremap <buffer> <silent> \sif :call C_InsertTemplate("statements.if-block")
nnoremap <buffer> <silent> \sif :call C_InsertTemplate("statements.if-block")
vnoremap <buffer> <silent> \sif :call C_InsertTemplate("statements.if-block", "v")
onoremap <buffer> <silent> \sie :call C_InsertTemplate("statements.if-else")
nnoremap <buffer> <silent> \sie :call C_InsertTemplate("statements.if-else")
vnoremap <buffer> <silent> \sie :call C_InsertTemplate("statements.if-else", "v")
onoremap <buffer> <silent> \sife :call C_InsertTemplate("statements.if-block-else")
nnoremap <buffer> <silent> \sife :call C_InsertTemplate("statements.if-block-else")
vnoremap <buffer> <silent> \sife :call C_InsertTemplate("statements.if-block-else", "v")
noremap <buffer> <silent> \sw :call C_InsertTemplate("statements.while")
onoremap <buffer> <silent> \swh :call C_InsertTemplate("statements.while-block")
nnoremap <buffer> <silent> \swh :call C_InsertTemplate("statements.while-block")
vnoremap <buffer> <silent> \swh :call C_InsertTemplate("statements.while-block", "v")
onoremap <buffer> <silent> \ss :call C_InsertTemplate("statements.switch")
nnoremap <buffer> <silent> \ss :call C_InsertTemplate("statements.switch")
vnoremap <buffer> <silent> \ss :call C_InsertTemplate("statements.switch", "v")
noremap <buffer> <silent> \sc :call C_InsertTemplate("statements.case")
onoremap <buffer> <silent> \s{ :call C_InsertTemplate("statements.block")
nnoremap <buffer> <silent> \s{ :call C_InsertTemplate("statements.block")
vnoremap <buffer> <silent> \s{ :call C_InsertTemplate("statements.block", "v")
noremap <buffer> <silent> \p< o#include	<><Left>
noremap <buffer> <silent> \p" o#include	""<Left>
noremap <buffer> <silent> \pd :call C_InsertTemplate("preprocessor.define")
noremap <buffer> <silent> \pu :call C_InsertTemplate("preprocessor.undefine")
onoremap <buffer> <silent> \pie :call C_InsertTemplate("preprocessor.if-else-endif")
nnoremap <buffer> <silent> \pie :call C_InsertTemplate("preprocessor.if-else-endif")
onoremap <buffer> <silent> \pid :call C_InsertTemplate("preprocessor.ifdef-else-endif")
nnoremap <buffer> <silent> \pid :call C_InsertTemplate("preprocessor.ifdef-else-endif")
onoremap <buffer> <silent> \pin :call C_InsertTemplate("preprocessor.ifndef-else-endif")
nnoremap <buffer> <silent> \pin :call C_InsertTemplate("preprocessor.ifndef-else-endif")
onoremap <buffer> <silent> \pind :call C_InsertTemplate("preprocessor.ifndef-def-endif")
nnoremap <buffer> <silent> \pind :call C_InsertTemplate("preprocessor.ifndef-def-endif")
onoremap <buffer> <silent> \pi0 :call C_PPIf0("a")2ji
nnoremap <buffer> <silent> \pi0 :call C_PPIf0("a")2ji
vnoremap <buffer> <silent> \pie :call C_InsertTemplate("preprocessor.if-else-endif", "v")
vnoremap <buffer> <silent> \pid :call C_InsertTemplate("preprocessor.ifdef-else-endif", "v")
vnoremap <buffer> <silent> \pin :call C_InsertTemplate("preprocessor.ifndef-else-endif", "v")
vnoremap <buffer> <silent> \pind :call C_InsertTemplate("preprocessor.ifndef-def-endif", "v")
vnoremap <buffer> <silent> \pi0 :call C_PPIf0("v")
noremap <buffer> <silent> \pr0 :call C_PPIf0Remove()
onoremap <buffer> <silent> \if :call C_InsertTemplate("idioms.function")
nnoremap <buffer> <silent> \if :call C_InsertTemplate("idioms.function")
vnoremap <buffer> <silent> \if :call C_InsertTemplate("idioms.function", "v")
onoremap <buffer> <silent> \isf :call C_InsertTemplate("idioms.function-static")
nnoremap <buffer> <silent> \isf :call C_InsertTemplate("idioms.function-static")
vnoremap <buffer> <silent> \isf :call C_InsertTemplate("idioms.function-static", "v")
onoremap <buffer> <silent> \im :call C_InsertTemplate("idioms.main")
nnoremap <buffer> <silent> \im :call C_InsertTemplate("idioms.main")
vnoremap <buffer> <silent> \im :call C_InsertTemplate("idioms.main", "v")
onoremap <buffer> <silent> \i0 :call C_CodeFor("up"  , "a")a
nnoremap <buffer> <silent> \i0 :call C_CodeFor("up"  , "a")a
vnoremap <buffer> <silent> \i0 :call C_CodeFor("up"  , "v")
onoremap <buffer> <silent> \in :call C_CodeFor("down", "a")a
nnoremap <buffer> <silent> \in :call C_CodeFor("down", "a")a
vnoremap <buffer> <silent> \in :call C_CodeFor("down", "v")
onoremap <buffer> <silent> \ie :call C_InsertTemplate("idioms.enum")
nnoremap <buffer> <silent> \ie :call C_InsertTemplate("idioms.enum")
vnoremap <buffer> <silent> \ie :call C_InsertTemplate("idioms.enum"  , "v")
onoremap <buffer> <silent> \is :call C_InsertTemplate("idioms.struct")
nnoremap <buffer> <silent> \is :call C_InsertTemplate("idioms.struct")
vnoremap <buffer> <silent> \is :call C_InsertTemplate("idioms.struct", "v")
onoremap <buffer> <silent> \iu :call C_InsertTemplate("idioms.union")
nnoremap <buffer> <silent> \iu :call C_InsertTemplate("idioms.union")
vnoremap <buffer> <silent> \iu :call C_InsertTemplate("idioms.union" , "v")
noremap <buffer> <silent> \ip oprintf("\n");2F"a
noremap <buffer> <silent> \isc oscanf("", & );F"i
noremap <buffer> <silent> \ica :call C_InsertTemplate("idioms.calloc")
noremap <buffer> <silent> \ima :call C_InsertTemplate("idioms.malloc")
onoremap <buffer> <silent> \isi isizeof()<Left>
nnoremap <buffer> <silent> \isi isizeof()<Left>
vnoremap <buffer> <silent> \isi ssizeof()P
onoremap <buffer> <silent> \ias oassert();<Left><Left>
nnoremap <buffer> <silent> \ias oassert();<Left><Left>
vnoremap <buffer> <silent> \ias sassert();F(p
noremap <buffer> <silent> \ii :call C_InsertTemplate("idioms.open-input-file")
noremap <buffer> <silent> \io :call C_InsertTemplate("idioms.open-output-file")
noremap <buffer> <silent> \nr :call C_CodeSnippet("r")
onoremap <buffer> <silent> \nw :call C_CodeSnippet("w")
nnoremap <buffer> <silent> \nw :call C_CodeSnippet("w")
vnoremap <buffer> <silent> \nw :call C_CodeSnippet("wv")
noremap <buffer> <silent> \ne :call C_CodeSnippet("e")
onoremap <buffer> <silent> \np :call C_ProtoPick("n")
nnoremap <buffer> <silent> \np :call C_ProtoPick("n")
vnoremap <buffer> <silent> \np :call C_ProtoPick("v")
noremap <buffer> <silent> \ni :call C_ProtoInsert()
noremap <buffer> <silent> \nc :call C_ProtoClear()
noremap <buffer> <silent> \ns :call C_ProtoShow()
noremap <buffer> <silent> \+m :call C_InsertTemplate("cpp.method-implementation")
noremap <buffer> <silent> \+c :call C_InsertTemplate("cpp.class")
noremap <buffer> <silent> \+cn :call C_InsertTemplate("cpp.class-using-new")
noremap <buffer> <silent> \+tm :call C_InsertTemplate("cpp.template-method-implementation")
noremap <buffer> <silent> \+tc :call C_InsertTemplate("cpp.template-class")
noremap <buffer> <silent> \+tcn :call C_InsertTemplate("cpp.template-class-using-new")
noremap <buffer> <silent> \+tf :call C_InsertTemplate("cpp.template-function")
noremap <buffer> <silent> \+ec :call C_InsertTemplate("cpp.error-class")
onoremap <buffer> <silent> \+tr :call C_InsertTemplate("cpp.try-catch")
nnoremap <buffer> <silent> \+tr :call C_InsertTemplate("cpp.try-catch")
vnoremap <buffer> <silent> \+tr :call C_InsertTemplate("cpp.try-catch", "v")
onoremap <buffer> <silent> \+ca :call C_InsertTemplate("cpp.catch")
nnoremap <buffer> <silent> \+ca :call C_InsertTemplate("cpp.catch")
vnoremap <buffer> <silent> \+ca :call C_InsertTemplate("cpp.catch", "v")
onoremap <buffer> <silent> \+c. :call C_InsertTemplate("cpp.catch-points")
nnoremap <buffer> <silent> \+c. :call C_InsertTemplate("cpp.catch-points")
vnoremap <buffer> <silent> \+c. :call C_InsertTemplate("cpp.catch-points", "v")
map <buffer> <silent> \rc :call C_Compile():redraw:call C_HlMessage()
map <buffer> <silent> \rl :call C_Link():redraw:call C_HlMessage()
map <buffer> <silent> \rr :call C_Run()
map <buffer> <silent> \ra :call C_Arguments()
map <buffer> <silent> \rm :call C_Make()
map <buffer> <silent> \rg :call C_MakeArguments()
map <buffer> <silent> \rp :call C_SplintCheck():redraw:call C_HlMessage()
map <buffer> <silent> \ri :call C_SplintArguments()
omap <buffer> <silent> \rd :call C_Indent("a"):redraw:call C_HlMessage()
nmap <buffer> <silent> \rd :call C_Indent("a"):redraw:call C_HlMessage()
vmap <buffer> <silent> \rd :call C_Indent("v"):redraw:call C_HlMessage()
omap <buffer> <silent> \rh :call C_Hardcopy("n")
nmap <buffer> <silent> \rh :call C_Hardcopy("n")
vmap <buffer> <silent> \rh :call C_Hardcopy("v")
map <buffer> <silent> \rs :call C_Settings()
map <buffer> <silent> \rt :call C_RebuildTemplates()
map <buffer> <silent> \rx :call C_XtermSize()
map <buffer> <silent> \ro :call C_Toggle_Gvim_Xterm()
map <buffer> <silent> \h :call C_HelpCsupport()
map <buffer> <silent> <M-F9> :call C_Compile():redraw:call C_HlMessage()
map <buffer> <silent> <F9> :call C_Link():redraw:call C_HlMessage()
map <buffer> <silent> <C-F9> :call C_Run()
map <buffer> <silent> <S-F9> :call C_Arguments()
inoremap <buffer> <silent> \cl :call C_LineEndComment()a
inoremap <buffer> <silent> \cj :call C_AdjustLineEndComm("a")a
inoremap <buffer> <silent> \cfr :call C_InsertTemplate("comment.frame")
inoremap <buffer> <silent> \cfu :call C_InsertTemplate("comment.function")
inoremap <buffer> <silent> \cme :call C_InsertTemplate("comment.method")
inoremap <buffer> <silent> \ccl :call C_InsertTemplate("comment.class")
inoremap <buffer> <silent> \cd =C_InsertDateAndTime('d')
inoremap <buffer> <silent> \ct =C_InsertDateAndTime('dt')
inoremap <buffer> <silent> \sd :call C_InsertTemplate("statements.do-while")
inoremap <buffer> <silent> \sf :call C_InsertTemplate("statements.for")
inoremap <buffer> <silent> \sfo :call C_InsertTemplate("statements.for-block")
inoremap <buffer> <silent> \si :call C_InsertTemplate("statements.if")
inoremap <buffer> <silent> \sif :call C_InsertTemplate("statements.if-block")
inoremap <buffer> <silent> \sie :call C_InsertTemplate("statements.if-else")
inoremap <buffer> <silent> \sife :call C_InsertTemplate("statements.if-block-else")
inoremap <buffer> <silent> \sw :call C_InsertTemplate("statements.while")
inoremap <buffer> <silent> \swh :call C_InsertTemplate("statements.while-block")
inoremap <buffer> <silent> \ss :call C_InsertTemplate("statements.switch")
inoremap <buffer> <silent> \sc :call C_InsertTemplate("statements.case")
inoremap <buffer> <silent> \s{ :call C_InsertTemplate("statements.block")
inoremap <buffer> <silent> \p< o#include	<><Left>
inoremap <buffer> <silent> \p" o#include	""<Left>
inoremap <buffer> <silent> \pd :call C_InsertTemplate("preprocessor.define")
inoremap <buffer> <silent> \pu :call C_InsertTemplate("preprocessor.undefine")
inoremap <buffer> <silent> \pie :call C_InsertTemplate("preprocessor.if-else-endif")
inoremap <buffer> <silent> \pid :call C_InsertTemplate("preprocessor.ifdef-else-endif")
inoremap <buffer> <silent> \pin :call C_InsertTemplate("preprocessor.ifndef-else-endif")
inoremap <buffer> <silent> \pind :call C_InsertTemplate("preprocessor.ifndef-def-endif")
inoremap <buffer> <silent> \pi0 :call C_PPIf0("a")2ji
inoremap <buffer> <silent> \if :call C_InsertTemplate("idioms.function")
inoremap <buffer> <silent> \isf :call C_InsertTemplate("idioms.function-static")
inoremap <buffer> <silent> \im :call C_InsertTemplate("idioms.main")
inoremap <buffer> <silent> \i0 :call C_CodeFor("up"  , "a")a
inoremap <buffer> <silent> \in :call C_CodeFor("down", "a")a
inoremap <buffer> <silent> \ie :call C_InsertTemplate("idioms.enum")
inoremap <buffer> <silent> \is :call C_InsertTemplate("idioms.struct")
inoremap <buffer> <silent> \iu :call C_InsertTemplate("idioms.union")
inoremap <buffer> <silent> \ip printf("\n");2F"a
inoremap <buffer> <silent> \isc scanf("", & );F"i
inoremap <buffer> <silent> \ica :call C_InsertTemplate("idioms.calloc")
inoremap <buffer> <silent> \ima :call C_InsertTemplate("idioms.malloc")
inoremap <buffer> <silent> \isi sizeof()<Left>
inoremap <buffer> <silent> \ias assert();<Left><Left>
inoremap <buffer> <silent> \ii :call C_InsertTemplate("idioms.open-input-file")
inoremap <buffer> <silent> \io :call C_InsertTemplate("idioms.open-output-file")
inoremap <buffer> <silent> \+m :call C_InsertTemplate("cpp.method-implementation")
inoremap <buffer> <silent> \+c :call C_InsertTemplate("cpp.class")
inoremap <buffer> <silent> \+cn :call C_InsertTemplate("cpp.class-using-new")
inoremap <buffer> <silent> \+tm :call C_InsertTemplate("cpp.template-method-implementation")
inoremap <buffer> <silent> \+tc :call C_InsertTemplate("cpp.template-class")
inoremap <buffer> <silent> \+tcn :call C_InsertTemplate("cpp.template-class-using-new")
inoremap <buffer> <silent> \+tf :call C_InsertTemplate("cpp.template-function")
inoremap <buffer> <silent> \+ec :call C_InsertTemplate("cpp.error-class")
inoremap <buffer> <silent> \+tr :call C_InsertTemplate("cpp.try-catch")
inoremap <buffer> <silent> \+ca :call C_InsertTemplate("cpp.catch")
inoremap <buffer> <silent> \+c. :call C_InsertTemplate("cpp.catch-points")
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal noarabic
setlocal autoindent
setlocal autoread
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal cindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal comments=sl:/*,mb:**,elx:*/,://
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal completefunc=
setlocal nocopyindent
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=~/.vim/c-support/wordlists/c-c++-keywords.list,~/.vim/c-support/wordlists/k+r.list,~/.vim/c-support/wordlists/stl_index.list
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'c'
setlocal filetype=c
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
set foldmethod=syntax
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=croql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keymap=
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=ccomplete#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=3
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'c'
setlocal syntax=c
endif
setlocal tabstop=3
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 19 - ((0 * winheight(0) + 22) / 45)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
19
normal! 0
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToO
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . s:sx
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
